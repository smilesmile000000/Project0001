<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:beans="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

   <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
   
   <!-- Enables the Spring MVC @Controller programming model -->
   <annotation-driven />

   <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
   <resources mapping="/resources/**" location="/resources/" />

   <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
   <!-- Resolver를 정의해둔 부분. -->
   <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
      <beans:property name="prefix" value="/WEB-INF/views/" />
      <beans:property name="suffix" value=".jsp" />
   </beans:bean>
   
   <!-- 파일 업로드를 위해서. -->
   <beans:bean id = "multipartResolver" class = "org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <beans:property name = "maxUploadSize" value = "104857600"/>
   </beans:bean>
   
   
<!-- 땜빵 -->
<!-- 객체생성 -->
<!--    <beans:bean id = "printMessage" class = "com.itisik.member.common.Message"></beans:bean> -->
<!--    <beans:bean id = "printMessage2" class = "com.itisik.member.common.Message2"></beans:bean> -->
   
<!--    <aop:config> -->
<!--       <aop:pointcut expression = "execution(* com.itisik.member.model.service..*Service.*(..))" id = "log"/> -->
<!--       <aop:pointcut expression = "execution(int com.itisik.member.model.service..*Service.*(..))" id = "returnInt"/> -->
<!--       <aop:aspect ref = "printMessage2"> -->
<!--          <aop:before method="printMessage" pointcut-ref="log"/> -->
<!--       </aop:aspect> -->
<!--       <aop:aspect ref = "printMessage"> -->
<!--          <aop:around method="aroundLog" pointcut-ref = "returnInt"/> -->
<!--       </aop:aspect> -->
<!--    </aop:config> -->

	<!-- AOP 어노테이션 방식 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
   <!-- AOP bean 방식
   <beans:bean id="before" class="org.kh.member.common.BeforeAdvice"/>
   <beans:bean id="afterReturning" class="org.kh.member.common.AfterReturnningAdvice"/>
   <beans:bean id="afterThrowing" class="org.kh.member.common.AfterThrowingAdvice"/>
   <beans:bean id="around" class="org.kh.member.common.AroundAdvice"/>
   
   <aop:config>
      <aop:pointcut id = "allPointCut" expression = "execution(* org.kh.member.model.service..*Service.*(..))"/>
      <aop:pointcut expression = "execution(* org.kh.member.model.service..*Service.*(..))" id = "returnInt"/>
      <aop:aspect ref = "before">
         <aop:before method = "beforeLog" pointcut-ref="allPointCut"/>
      </aop:aspect>
      <aop:aspect ref="afterReturning">
      	<aop:after-returning method="afterLog" pointcut-ref="allPointCut" returning="returnObj"/>
      </aop:aspect>
      <aop:aspect ref="afterThrowing">
      	<aop:after-throwing method="exceptionLog" pointcut-ref="allPointCut" throwing="exceptObj"/>
      </aop:aspect>
      <aop:aspect ref="around">
      	<aop:around method="aroundLog" pointcut-ref="allPointCut"/>
      </aop:aspect>
   </aop:config>
    -->
   
   <!-- 서버 실행시, base-package로 설정되어 있는 곳의 아래에 @annotation으로 등록된 객체를 자동생성해줌 -->
   <context:component-scan base-package="org.kh.member" />
   <context:component-scan base-package="org.kh.board" />
   
</beans:beans>